-- SQL Case Study 1
	use sql_assignments

-- Imported all the tables provided in the assignment file
	select * from fact
	select * from location
	select * from product

-- 1) Display the number of states present in the Location Table
	--A)
		select count(distinct state) state_count from location

-- 2) How many products are of regular type?
	--A)
		select count(Product) product_count 
		from Product 
		where type like 'regular'

-- 3) How much spending has been done on marketing of product ID 1?
	--A)
		select sum(Marketing) total_marketing
		from fact 
		where ProductId = 1

-- 4) What is the minimum sales of a product?
	--A)
		select min(sales) min_sales 
		from fact

-- 5) Display the max Cost of Good Sold (COGS)
	--A)
		select max(cogs) max_cogs
		from fact

-- 6) Display the details of the product where product type is coffee
	--A)
		select
			p.Product_Type,
			f.*
		from fact f
		left join Product p on f.ProductId=p.ProductId
		where p.Product_Type like 'coffee'

-- 7) Display the details where total expenses are greater than 40
	--A)
		select *
		from fact
		where Total_Expenses > 40

-- 8) What is the average sales in area code 719?
	--A)
		select avg(sales) avg_sales
		from fact
		where Area_Code = 719

-- 9) Find out the total profit generated by Colorado state
	--A)
		select sum(Profit) total_profit
		from fact
		where Area_Code in (select Area_Code 
							from Location 
							where State like 'colorado')

-- 10) Display the average inventory for each product ID
	--A)
		select
			ProductId,
			avg(inventory) avg_inventory
		from fact
		group by ProductId
		order by ProductId

-- 11) Display state in a sequential order in a Location Table
	--A)
		select distinct State
		from Location
		order by State

-- 12) Display the average budget of the Product where the average budget margin should be greater than 100
	--A)
		-- As per discussion in class the corrected question is;
		-- Display the average budget margin of the area_code where average budget margin should be greater than 100.
		
		select
			Area_Code,
			avg(budget_margin) avg_bud_margin
		from fact
		group by Area_Code
		having avg(budget_margin) > 100
		order by Area_Code

-- 13) What is the total sales done on date 2010-01-01?
	--A)
		select sum(sales) total_sales
		from fact
		where Date like '2010-01-01'

-- 14) Display the average total expense of each product ID on an individual date
	--A)
		select
			Date,
			ProductId,
			avg(total_expenses) avg_total_exp
		from fact
		group by date, ProductId
		order by date, ProductId

-- 15) Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code
	--A)
		select
			f.Date,
			f.ProductId,
			p.Product_Type,
			p.Product,
			f.Sales,
			f.Profit,
			l.State,
			f.Area_Code
		from fact f
		left join Location l on f.Area_Code=l.Area_Code
		left join Product p on f.ProductId=p.ProductId

-- 16) Display the rank without any gap to show the sales wise rank
	--A)
		select
			Sales,
			dense_rank()over(order by sales desc) rank
		from fact

-- 17) Find the state wise profit and sales
	--A)
		select
			l.State,
			sum(f.profit) profit,
			sum(f.sales) sales
		from fact f
		left join Location l on f.Area_Code=l.Area_Code
		group by l.State
		order by l.State

-- 18) Find the state wise profit and sales along with the product name
	--A)
		select
			l.State,
			p.Product,
			sum(f.profit) profit,
			sum(f.sales) sales
		from fact f
		left join Location l on f.Area_Code=l.Area_Code
		left join Product p on f.ProductId=p.ProductId
		group by l.State, p.Product
		order by l.State, p.Product

-- 19) If there is an increase in sales of 5%, calculate the increased sales
	--A)
		select
			Sales,
			(Sales*1.05) increased_sales
		from fact

-- 20) Find the maximum profit along with the product ID and product type
	--A)
		select
			f.ProductId,
			p.Product_Type,
			max(f.profit) max_profit
		from fact f
		left join Product p on f.ProductId=p.ProductId
		group by f.ProductId,p.Product_Type
		order by f.ProductId,p.Product_Type

-- 21) Create a stored procedure to fetch the result according to the product type from Product Table
	--A)
		create procedure ptype_details
		@product_type varchar(50) as
		select * from Product where Product_Type like @product_type

		exec ptype_details 'Espresso'

-- 22) Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss
	--A)
		select
			Total_Expenses,
			(case when Total_Expenses<60 then 'profit'
					else 'loss' end) profit_loss
		from fact

-- 23) Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
	--A)
		select
			DATEPART(week,date) week,
			ProductId,
			sum(sales) total_sales
		from fact
		group by DATEPART(week,date), ProductId with rollup
		order by DATEPART(week,date), ProductId

-- 24) Apply union and intersection operator on the tables which consist of attribute area code
	--A)
		select Area_Code
		from fact
		union
		select Area_Code
		from Location

		select Area_Code
		from fact
		intersect
		select Area_Code
		from Location

-- 25) Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference
	--A)
		create function ptype_choice(@ptype varchar(50))
		returns table as return
			select * from Product where Product_Type like @ptype

		select * from ptype_choice('Herbal Tea')

-- 26) Change the product type from coffee to tea where product ID is 1 and undo it
	--A)
		begin transaction ptype_change1
			update Product
			set Product_Type = 'tea'
			where ProductId = 1

		select * from Product

		rollback transaction ptype_change1

-- 27) Display the date, product ID and sales where total expenses are between 100 to 200
	--A)
		select
			Date,
			ProductId,
			Sales
		from fact
		where Total_Expenses between 100 and 200

-- 28) Delete the records in the Product Table for regular type
	--A)
		begin transaction temp_delete1
		delete from Product 
		where Type = 'regular'

		select * from Product

		rollback transaction

-- 29) Display the ASCII value of the fifth character from the column Product
	--A)
		select 
			Product,
			SUBSTRING(Product,5,1) fifth_char, 
			ASCII(SUBSTRING(Product,5,1)) ASCII_value
		from Product